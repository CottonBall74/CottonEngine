cmake_minimum_required(VERSION 3.16)

project(SodaEngine)

set(CMAKE_CXX_STANDARD 17)

# Output directories
set(outputdir "${CMAKE_BUILD_TYPE}-${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin/${outputdir}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin-objs/${outputdir}")

file(GLOB_RECURSE SOURCES_CPP "Soda/src/*.cpp")
file(GLOB_RECURSE SOURCES_H "Soda/src/*.h")

add_subdirectory(Soda/submodules/glfw)
add_subdirectory(Soda/submodules/glad)
add_subdirectory(Soda/submodules/glm)
# add_subdirectory(Soda/submodules/imgui)

set(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the build type.")
set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release Dist)


target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/Soda/src
                                                  ${CMAKE_CURRENT_SOURCE_DIR}/Soda/submodules/glfw/include
                                                  ${CMAKE_CURRENT_SOURCE_DIR}/Soda/submodules/glad/include
                                                  ${CMAKE_CURRENT_SOURCE_DIR}/Soda/submodules/spdlog/include
                                                  ${CMAKE_CURRENT_SOURCE_DIR}/Soda/submodules/glm
                                                  ${CMAKE_CURRENT_SOURCE_DIR}/Soda/submodules/stb_image
                                                  ${CMAKE_CURRENT_SOURCE_DIR}/Soda/submodules/imgui)

add_library(${PROJECT_NAME} STATIC ${SOURCES_CPP} ${SOURCES_H}
                                   ${CMAKE_CURRENT_SOURCE_DIR}/Soda/submodules/stb_image/**.h
                                   ${CMAKE_CURRENT_SOURCE_DIR}/Soda/submodules/stb_image/**.cpp
                                   ${CMAKE_CURRENT_SOURCE_DIR}/Soda/submodules/glm/**.h)

target_precompile_headers(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/Soda/src/sdpch.h)

target_link_libraries(${PROJECT_NAME} PUBLIC glfw glad imgui)

target_compile_definitions(${PROJECT_NAME} PUBLIC GLFW_INCLUDE_NONE
                                           _CRT_SECURE_NO_WARNINGS)

if(WIN32)
    target_compile_definitions(${PROJECT_NAME} PUBLIC SD_PLATFORM_WINDOWS)
    target_link_libraries(${PROJECT_NAME} PRIVATE opengl32)
elseif(UNIX)
    target_compile_definitions(${PROJECT_NAME} PUBLIC SD_PLATFORM_LINUX)
    target_compile_flags(${PROJECT_NAME} PRIVATE -pthread)
endif()

if(CMAKE_BUILD_TYPE MATCHES "Debug")
    target_compile_definitions(${PROJECT_NAME} PUBLIC SD_DEBUG)
    target_compile_options(${PROJECT_NAME} PRIVATE -g -Wall -DDEBUG)
elseif(CMAKE_BUILD_TYPE MATCHES "Release")
    target_compile_definitions(${PROJECT_NAME} PUBLIC SD_RELEASE)
    target_compile_options(${PROJECT_NAME} PRIVATE -O2 -DNDEBUG)
elseif(CMAKE_BUILD_TYPE MATCHES "Dist")
    target_compile_definitions(${PROJECT_NAME} PUBLIC SD_DIST)
    target_compile_options(${PROJECT_NAME} PRIVATE -O3 -DNDEBUG)
    target_link_options(${PROJECT_NAME} PRIVATE -Wl,--strip-all)
endif()


